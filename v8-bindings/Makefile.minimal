# V8 DOM Bindings - Minimal Build (Completed Wrappers Only)
# 
# Builds only the wrappers that are fully implemented

CXX := clang++
# V8 build flags (must match V8 configuration)
V8_FLAGS := -DV8_COMPRESS_POINTERS -DV8_31BIT_SMIS_ON_64BIT_ARCH -DV8_ENABLE_SANDBOX
CXXFLAGS := -std=c++20 -Wall -Wextra -O2 -fPIC $(V8_FLAGS)
AR := ar
ARFLAGS := rcs

# V8 paths
V8_INCLUDE := /opt/homebrew/Cellar/v8/13.5.212.10/libexec/include
V8_LIB := /opt/homebrew/lib

# Project paths
DOM_INCLUDE := ../js-bindings
SRC_DIR := src
OBJ_DIR := obj
LIB_DIR := lib

# Compiler flags
INCLUDES := -I$(DOM_INCLUDE) -I$(V8_INCLUDE)

# Only include completed wrappers
COMPLETED_SRCS := \
	$(SRC_DIR)/v8_dom.cpp \
	$(SRC_DIR)/wrapper_cache.cpp \
	$(SRC_DIR)/core/template_cache.cpp \
	$(SRC_DIR)/nodes/node_wrapper.cpp \
	$(SRC_DIR)/nodes/document_wrapper.cpp \
	$(SRC_DIR)/nodes/text_wrapper.cpp \
	$(SRC_DIR)/nodes/characterdata_wrapper.cpp \
	$(SRC_DIR)/nodes/element_wrapper.cpp \
	$(SRC_DIR)/nodes/attr_wrapper.cpp \
	$(SRC_DIR)/events/event_wrapper.cpp \
	$(SRC_DIR)/events/eventtarget_wrapper_stub.cpp \
	$(SRC_DIR)/collections/nodelist_wrapper.cpp \
	$(SRC_DIR)/collections/htmlcollection_wrapper.cpp \
	$(SRC_DIR)/collections/domtokenlist_wrapper_stub.cpp \
	$(SRC_DIR)/nodes/shadowroot_wrapper_stub.cpp

# C API stubs
STUB_SRCS := $(SRC_DIR)/stub_capi.c

# Object files
OBJS := $(patsubst $(SRC_DIR)/%.cpp,$(OBJ_DIR)/%.o,$(COMPLETED_SRCS))
STUB_OBJS := $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(STUB_SRCS))

# Target library
TARGET := $(LIB_DIR)/libv8dom.a

# Default target
all: $(TARGET)
	@echo ""
	@echo "✅ V8 DOM Bindings library built successfully!"
	@echo ""
	@echo "Included wrappers:"
	@echo "  - NodeWrapper (tree manipulation)"
	@echo "  - DocumentWrapper (factory methods, queries)"
	@echo "  - ElementWrapper (attributes, queries, shadow DOM)"
	@echo "  - TextWrapper (text operations)"
	@echo "  - CharacterDataWrapper (character data)"
	@echo "  - EventWrapper (event properties & methods)"
	@echo ""
	@echo "Library: $(TARGET)"
	@echo "Size: $$(du -h $(TARGET) | cut -f1)"
	@echo ""
	@echo "To use in your project:"
	@echo "  clang++ your_code.cpp \\"
	@echo "    -I./include -I../js-bindings -I$(V8_INCLUDE) \\"
	@echo "    -L./lib -lv8dom \\"
	@echo "    -L../zig-out/lib -ldom \\"
	@echo "    -L$(V8_LIB) -lv8 \\"
	@echo "    -lpthread -o your_program"

# Build static library
$(TARGET): $(OBJS) $(STUB_OBJS)
	@echo "Creating static library..."
	@mkdir -p $(LIB_DIR)
	$(AR) $(ARFLAGS) $@ $^

# Compile source files
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	@echo "Compiling $<..."
	@mkdir -p $(dir $@)
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@ 2>&1 | grep -v "warning: unused parameter" | grep -v "In file included" | head -20 || true

# Compile C stubs
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	@echo "Compiling C stub $<..."
	@mkdir -p $(dir $@)
	@clang -O2 -fPIC -I$(DOM_INCLUDE) -c $< -o $@

# Clean build artifacts
clean:
	@echo "Cleaning..."
	@rm -rf $(OBJ_DIR) $(LIB_DIR)
	@echo "✓ Clean complete"

# Show what we're building
list:
	@echo "Completed wrappers to build:"
	@echo "$(COMPLETED_SRCS)" | tr ' ' '\n'

# Test program
test_simple: $(TARGET) test_simple.cpp
	@echo "Building test program..."
	$(CXX) $(CXXFLAGS) test_simple.cpp \
	  -I./include -I$(DOM_INCLUDE) $(INCLUDES) \
	  -L$(LIB_DIR) -lv8dom \
	  -L../zig-out/lib -ldom \
	  -L$(V8_LIB) -lv8 -lv8_libplatform \
	  -lpthread -Wl,-undefined,dynamic_lookup -o test_simple
	@echo "✅ Test program built: ./test_simple"

.PHONY: all clean list test_simple
