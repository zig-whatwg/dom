DOM Selector Benchmark - BASELINE (Before Optimization)
========================================================
Date: 2025-10-17
Optimize: ReleaseFast
Zig: 0.15.1

Results:
--------
Tokenizer: Simple ID (#main): 10µs/op (99950 ops/sec)
Tokenizer: Simple Class (.button): 8µs/op (111694 ops/sec)
Tokenizer: Complex: 21µs/op (46395 ops/sec)
Parser: Simple ID (#main): 21µs/op (46827 ops/sec)
Parser: Simple Class (.button): 20µs/op (47766 ops/sec)
Parser: Complex: 33µs/op (30187 ops/sec)
Matcher: Simple ID: 36µs/op (27183 ops/sec)
Matcher: Simple Class: 44µs/op (22611 ops/sec)
querySelector: Small DOM (100): 741µs/op (1347 ops/sec)
querySelector: Medium DOM (1000): 10ms/op (93 ops/sec)
querySelector: Large DOM (10000): 111ms/op (9 ops/sec)
querySelector: Class selector: 120µs/op (8272 ops/sec)
SPA: Repeated queries (1000x): 142µs/op (7032 ops/sec)

Key Findings:
-------------
1. querySelector on Small DOM (100 elems): 741µs
   - Expected with fast paths: ~1-5µs (150-741x improvement)
   
2. querySelector on Medium DOM (1000 elems): 10ms
   - Expected with fast paths: ~1-10µs (1000-10000x improvement)
   
3. querySelector on Large DOM (10000 elems): 111ms
   - Expected with fast paths: ~1-10µs (11100-111000x improvement)
   
4. querySelector Class selector: 120µs
   - Expected with fast paths: ~10-50µs (2-12x improvement)
   
5. SPA Repeated queries: 142µs per query
   - Expected with selector cache: <1µs (142x improvement)
   - For 1000 queries: saved 141ms per 1000 queries

Target Improvements (Phase 1: Fast Paths + Cache):
--------------------------------------------------
- Simple ID (#id): 500-741x faster
- Simple class (.class): 2-12x faster  
- Simple tag (tag): 10-20x faster
- Repeated queries (SPA): 142x faster with cache

Next Steps:
-----------
1. Implement fast path detection
2. Add element-only iterator
3. Integrate ID map (O(1) lookup)
4. Add selector cache
5. Run benchmarks again and compare
