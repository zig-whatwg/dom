const std = @import("std");
const Allocator = std.mem.Allocator;

/// Event represents a DOM event that can be dispatched to EventTarget objects.
///
/// Implements WHATWG DOM Event interface per §2.2.
///
/// ## WebIDL
/// ```webidl
/// [Exposed=*]
/// interface Event {
///   constructor(DOMString type, optional EventInit eventInitDict = {});
///
///   readonly attribute DOMString type;
///   readonly attribute EventTarget? target;
///   readonly attribute EventTarget? currentTarget;
///
///   const unsigned short NONE = 0;
///   const unsigned short CAPTURING_PHASE = 1;
///   const unsigned short AT_TARGET = 2;
///   const unsigned short BUBBLING_PHASE = 3;
///   readonly attribute unsigned short eventPhase;
///
///   undefined stopPropagation();
///   undefined stopImmediatePropagation();
///
///   readonly attribute boolean bubbles;
///   readonly attribute boolean cancelable;
///   undefined preventDefault();
///   readonly attribute boolean defaultPrevented;
///   readonly attribute boolean composed;
///
///   readonly attribute boolean isTrusted;
///   readonly attribute DOMHighResTimeStamp timeStamp;
/// };
/// ```
///
/// ## Spec References
/// - Algorithm: https://dom.spec.whatwg.org/#interface-event
/// - WebIDL: /Users/bcardarella/projects/webref/ed/idl/dom.idl:26-52
pub const Event = struct {
    /// Event type (e.g., "click", "load", "submit")
    event_type: []const u8,

    /// Target to which event is dispatched
    target: ?*anyopaque = null,

    /// Current target whose event listener is being invoked
    current_target: ?*anyopaque = null,

    /// Event phase (NONE, CAPTURING_PHASE, AT_TARGET, BUBBLING_PHASE)
    event_phase: EventPhase = .none,

    /// Whether event bubbles up the tree
    bubbles: bool,

    /// Whether event can be canceled
    cancelable: bool,

    /// Whether event was generated by user agent (vs dispatchEvent)
    is_trusted: bool = false,

    /// Timestamp when event was created (milliseconds)
    time_stamp: f64 = 0.0,

    /// Whether event invokes listeners past ShadowRoot boundary
    composed: bool = false,

    // Internal flags (not exposed as attributes)

    /// Stop propagation flag - prevents event from reaching other objects
    stop_propagation_flag: bool = false,

    /// Stop immediate propagation flag - prevents other listeners from being invoked
    stop_immediate_propagation_flag: bool = false,

    /// Canceled flag - set by preventDefault()
    canceled_flag: bool = false,

    /// In passive listener flag - used for performance optimizations
    in_passive_listener_flag: bool = false,

    /// Dispatch flag - set while event is being dispatched
    dispatch_flag: bool = false,

    /// Initialized flag - set when event is properly initialized
    initialized_flag: bool = false,

    /// Event phase constants (WHATWG DOM §2.2)
    pub const EventPhase = enum(u16) {
        none = 0,
        capturing_phase = 1,
        at_target = 2,
        bubbling_phase = 3,
    };

    /// Creates a new Event with the given type and options.
    ///
    /// Implements WHATWG DOM Event() constructor per §2.2.
    ///
    /// ## WebIDL
    /// ```webidl
    /// constructor(DOMString type, optional EventInit eventInitDict = {});
    /// ```
    ///
    /// ## Parameters
    /// - `event_type`: The event type string (e.g., "click")
    /// - `options`: Optional initialization options
    ///
    /// ## Returns
    /// New Event object
    ///
    /// ## Spec References
    /// - Algorithm: https://dom.spec.whatwg.org/#dom-event-event
    /// - WebIDL: /Users/bcardarella/projects/webref/ed/idl/dom.idl:27
    pub fn init(event_type: []const u8, options: EventInit) Event {
        return .{
            .event_type = event_type,
            .bubbles = options.bubbles,
            .cancelable = options.cancelable,
            .composed = options.composed,
            .initialized_flag = true,
        };
    }

    /// Stops propagation of the event to other objects.
    ///
    /// Implements WHATWG DOM Event.stopPropagation() per §2.2.
    ///
    /// ## WebIDL
    /// ```webidl
    /// undefined stopPropagation();
    /// ```
    ///
    /// ## Spec References
    /// - Algorithm: https://dom.spec.whatwg.org/#dom-event-stoppropagation
    /// - WebIDL: /Users/bcardarella/projects/webref/ed/idl/dom.idl:38
    pub fn stopPropagation(self: *Event) void {
        self.stop_propagation_flag = true;
    }

    /// Stops propagation and prevents any remaining listeners from being called.
    ///
    /// Implements WHATWG DOM Event.stopImmediatePropagation() per §2.2.
    ///
    /// ## WebIDL
    /// ```webidl
    /// undefined stopImmediatePropagation();
    /// ```
    ///
    /// ## Spec References
    /// - Algorithm: https://dom.spec.whatwg.org/#dom-event-stopimmediatepropagation
    /// - WebIDL: /Users/bcardarella/projects/webref/ed/idl/dom.idl:40
    pub fn stopImmediatePropagation(self: *Event) void {
        self.stop_propagation_flag = true;
        self.stop_immediate_propagation_flag = true;
    }

    /// Cancels the event if it is cancelable.
    ///
    /// Implements WHATWG DOM Event.preventDefault() per §2.2.
    ///
    /// ## WebIDL
    /// ```webidl
    /// undefined preventDefault();
    /// ```
    ///
    /// ## Algorithm
    /// Per spec: "To set the canceled flag, given an event, if event's cancelable
    /// attribute value is true and event's in passive listener flag is unset,
    /// then set event's canceled flag."
    ///
    /// ## Spec References
    /// - Algorithm: https://dom.spec.whatwg.org/#dom-event-preventdefault
    /// - WebIDL: /Users/bcardarella/projects/webref/ed/idl/dom.idl:46
    pub fn preventDefault(self: *Event) void {
        // Only cancel if event is cancelable and not in passive listener
        if (self.cancelable and !self.in_passive_listener_flag) {
            self.canceled_flag = true;
        }
    }

    /// Returns whether preventDefault() was successfully invoked.
    ///
    /// Implements WHATWG DOM Event.defaultPrevented getter per §2.2.
    ///
    /// ## WebIDL
    /// ```webidl
    /// readonly attribute boolean defaultPrevented;
    /// ```
    ///
    /// ## Spec References
    /// - Algorithm: https://dom.spec.whatwg.org/#dom-event-defaultprevented
    /// - WebIDL: /Users/bcardarella/projects/webref/ed/idl/dom.idl:47
    pub fn defaultPrevented(self: *const Event) bool {
        return self.canceled_flag;
    }
};

/// Options for creating an Event.
///
/// Implements WHATWG DOM EventInit dictionary per §2.2.
///
/// ## WebIDL
/// ```webidl
/// dictionary EventInit {
///   boolean bubbles = false;
///   boolean cancelable = false;
///   boolean composed = false;
/// };
/// ```
///
/// ## Spec References
/// - WebIDL: /Users/bcardarella/projects/webref/ed/idl/dom.idl:54-58
pub const EventInit = struct {
    /// Whether event bubbles up through ancestors
    bubbles: bool = false,

    /// Whether event can be canceled with preventDefault()
    cancelable: bool = false,

    /// Whether event crosses shadow DOM boundary
    composed: bool = false,
};

// ============================================================================
// TESTS
// ============================================================================

test "Event.init - creates event with type" {
    const event = Event.init("click", .{});
    try std.testing.expectEqualStrings("click", event.event_type);
    try std.testing.expect(event.initialized_flag == true);
    try std.testing.expect(event.is_trusted == false);
}

test "Event.init - uses default options" {
    const event = Event.init("custom", .{});
    try std.testing.expect(event.bubbles == false);
    try std.testing.expect(event.cancelable == false);
    try std.testing.expect(event.composed == false);
}

test "Event.init - respects bubbles option" {
    const event = Event.init("submit", .{ .bubbles = true });
    try std.testing.expect(event.bubbles == true);
}

test "Event.init - respects cancelable option" {
    const event = Event.init("click", .{ .cancelable = true });
    try std.testing.expect(event.cancelable == true);
}

test "Event.init - respects composed option" {
    const event = Event.init("change", .{ .composed = true });
    try std.testing.expect(event.composed == true);
}

test "Event.stopPropagation - sets stop propagation flag" {
    var event = Event.init("click", .{});
    try std.testing.expect(event.stop_propagation_flag == false);

    event.stopPropagation();
    try std.testing.expect(event.stop_propagation_flag == true);
}

test "Event.stopImmediatePropagation - sets both flags" {
    var event = Event.init("click", .{});
    try std.testing.expect(event.stop_propagation_flag == false);
    try std.testing.expect(event.stop_immediate_propagation_flag == false);

    event.stopImmediatePropagation();
    try std.testing.expect(event.stop_propagation_flag == true);
    try std.testing.expect(event.stop_immediate_propagation_flag == true);
}

test "Event.preventDefault - cancels cancelable event" {
    var event = Event.init("submit", .{ .cancelable = true });
    try std.testing.expect(event.defaultPrevented() == false);

    event.preventDefault();
    try std.testing.expect(event.defaultPrevented() == true);
}

test "Event.preventDefault - no effect on non-cancelable event" {
    var event = Event.init("click", .{ .cancelable = false });
    try std.testing.expect(event.defaultPrevented() == false);

    event.preventDefault();
    try std.testing.expect(event.defaultPrevented() == false);
}

test "Event.preventDefault - no effect in passive listener" {
    var event = Event.init("wheel", .{ .cancelable = true });
    event.in_passive_listener_flag = true;

    event.preventDefault();
    try std.testing.expect(event.defaultPrevented() == false);
}

test "Event.defaultPrevented - returns canceled state" {
    var event = Event.init("click", .{ .cancelable = true });
    try std.testing.expect(event.defaultPrevented() == false);

    event.canceled_flag = true;
    try std.testing.expect(event.defaultPrevented() == true);
}

test "Event - initial event_phase is none" {
    const event = Event.init("load", .{});
    try std.testing.expect(event.event_phase == .none);
}

test "Event - event_phase constants match spec" {
    try std.testing.expectEqual(@as(u16, 0), @intFromEnum(Event.EventPhase.none));
    try std.testing.expectEqual(@as(u16, 1), @intFromEnum(Event.EventPhase.capturing_phase));
    try std.testing.expectEqual(@as(u16, 2), @intFromEnum(Event.EventPhase.at_target));
    try std.testing.expectEqual(@as(u16, 3), @intFromEnum(Event.EventPhase.bubbling_phase));
}
